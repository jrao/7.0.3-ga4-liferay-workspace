/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.springexample.servicebuilder.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.springexample.servicebuilder.model.JIRAAction;
import com.liferay.springexample.servicebuilder.model.JIRAActionModel;
import com.liferay.springexample.servicebuilder.service.persistence.JIRAActionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the JIRAAction service. Represents a row in the &quot;jiraaction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JIRAActionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JIRAActionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JIRAActionImpl
 * @see JIRAAction
 * @see JIRAActionModel
 * @generated
 */
@ProviderType
public class JIRAActionModelImpl extends BaseModelImpl<JIRAAction>
	implements JIRAActionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jira action model instance should use the {@link JIRAAction} interface instead.
	 */
	public static final String TABLE_NAME = "jiraaction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "javatest", Types.BIGINT },
			{ "javatest", Types.VARCHAR },
			{ "javatest", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("javatest", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("javatest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("javatest", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table jiraaction (javatest LONG not null,javatest VARCHAR(75) not null,javatest LONG not null,primary key (javatest, javatest, javatest))";
	public static final String TABLE_SQL_DROP = "drop table jiraaction";
	public static final String ORDER_BY_JPQL = " ORDER BY jiraAction.id.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY jiraaction.javatest ASC";
	public static final String DATA_SOURCE = "testDB";
	public static final String SESSION_FACTORY = "jiraSessionFactory";
	public static final String TX_MANAGER = "jiraTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.springexample.servicebuilder.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.springexample.servicebuilder.model.JIRAAction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.springexample.servicebuilder.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.springexample.servicebuilder.model.JIRAAction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.springexample.servicebuilder.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.springexample.servicebuilder.model.JIRAAction"),
			true);
	public static final long ID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.springexample.servicebuilder.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.springexample.servicebuilder.model.JIRAAction"));

	public JIRAActionModelImpl() {
	}

	@Override
	public JIRAActionPK getPrimaryKey() {
		return new JIRAActionPK(_id, _foo, _bar);
	}

	@Override
	public void setPrimaryKey(JIRAActionPK primaryKey) {
		setId(primaryKey.id);
		setFoo(primaryKey.foo);
		setBar(primaryKey.bar);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new JIRAActionPK(_id, _foo, _bar);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((JIRAActionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return JIRAAction.class;
	}

	@Override
	public String getModelClassName() {
		return JIRAAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("foo", getFoo());
		attributes.put("bar", getBar());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String foo = (String)attributes.get("foo");

		if (foo != null) {
			setFoo(foo);
		}

		Long bar = (Long)attributes.get("bar");

		if (bar != null) {
			setBar(bar);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@Override
	public String getFoo() {
		if (_foo == null) {
			return StringPool.BLANK;
		}
		else {
			return _foo;
		}
	}

	@Override
	public void setFoo(String foo) {
		_foo = foo;
	}

	@Override
	public long getBar() {
		return _bar;
	}

	@Override
	public void setBar(long bar) {
		_bar = bar;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public JIRAAction toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JIRAAction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JIRAActionImpl jiraActionImpl = new JIRAActionImpl();

		jiraActionImpl.setId(getId());
		jiraActionImpl.setFoo(getFoo());
		jiraActionImpl.setBar(getBar());

		jiraActionImpl.resetOriginalValues();

		return jiraActionImpl;
	}

	@Override
	public int compareTo(JIRAAction jiraAction) {
		int value = 0;

		if (getId() < jiraAction.getId()) {
			value = -1;
		}
		else if (getId() > jiraAction.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JIRAAction)) {
			return false;
		}

		JIRAAction jiraAction = (JIRAAction)obj;

		JIRAActionPK primaryKey = jiraAction.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		JIRAActionModelImpl jiraActionModelImpl = this;

		jiraActionModelImpl._originalId = jiraActionModelImpl._id;

		jiraActionModelImpl._setOriginalId = false;

		jiraActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<JIRAAction> toCacheModel() {
		JIRAActionCacheModel jiraActionCacheModel = new JIRAActionCacheModel();

		jiraActionCacheModel.jiraActionPK = getPrimaryKey();

		jiraActionCacheModel.id = getId();

		jiraActionCacheModel.foo = getFoo();

		String foo = jiraActionCacheModel.foo;

		if ((foo != null) && (foo.length() == 0)) {
			jiraActionCacheModel.foo = null;
		}

		jiraActionCacheModel.bar = getBar();

		return jiraActionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", foo=");
		sb.append(getFoo());
		sb.append(", bar=");
		sb.append(getBar());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.springexample.servicebuilder.model.JIRAAction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>foo</column-name><column-value><![CDATA[");
		sb.append(getFoo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bar</column-name><column-value><![CDATA[");
		sb.append(getBar());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = JIRAAction.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			JIRAAction.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private String _foo;
	private long _bar;
	private long _columnBitmask;
	private JIRAAction _escapedModel;
}