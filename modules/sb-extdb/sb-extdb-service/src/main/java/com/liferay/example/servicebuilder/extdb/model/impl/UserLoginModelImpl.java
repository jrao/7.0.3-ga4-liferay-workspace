/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.example.servicebuilder.extdb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.example.servicebuilder.extdb.model.UserLogin;
import com.liferay.example.servicebuilder.extdb.model.UserLoginModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserLogin service. Represents a row in the &quot;ExtDB_UserLogin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserLoginModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserLoginImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserLoginImpl
 * @see UserLogin
 * @see UserLoginModel
 * @generated
 */
@ProviderType
public class UserLoginModelImpl extends BaseModelImpl<UserLogin>
	implements UserLoginModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user login model instance should use the {@link UserLogin} interface instead.
	 */
	public static final String TABLE_NAME = "ExtDB_UserLogin";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "lastLogin", Types.TIMESTAMP },
			{ "totalLogins", Types.BIGINT },
			{ "longestTimeBetweenLogins", Types.BIGINT },
			{ "shortestTimeBetweenLogins", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastLogin", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalLogins", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("longestTimeBetweenLogins", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shortestTimeBetweenLogins", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table ExtDB_UserLogin (userId LONG not null primary key,lastLogin DATE null,totalLogins LONG,longestTimeBetweenLogins LONG,shortestTimeBetweenLogins LONG)";
	public static final String TABLE_SQL_DROP = "drop table ExtDB_UserLogin";
	public static final String ORDER_BY_JPQL = " ORDER BY userLogin.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ExtDB_UserLogin.userId ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.example.servicebuilder.extdb.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.example.servicebuilder.extdb.model.UserLogin"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.example.servicebuilder.extdb.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.example.servicebuilder.extdb.model.UserLogin"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.example.servicebuilder.extdb.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.example.servicebuilder.extdb.model.UserLogin"));

	public UserLoginModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserLogin.class;
	}

	@Override
	public String getModelClassName() {
		return UserLogin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("lastLogin", getLastLogin());
		attributes.put("totalLogins", getTotalLogins());
		attributes.put("longestTimeBetweenLogins", getLongestTimeBetweenLogins());
		attributes.put("shortestTimeBetweenLogins",
			getShortestTimeBetweenLogins());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date lastLogin = (Date)attributes.get("lastLogin");

		if (lastLogin != null) {
			setLastLogin(lastLogin);
		}

		Long totalLogins = (Long)attributes.get("totalLogins");

		if (totalLogins != null) {
			setTotalLogins(totalLogins);
		}

		Long longestTimeBetweenLogins = (Long)attributes.get(
				"longestTimeBetweenLogins");

		if (longestTimeBetweenLogins != null) {
			setLongestTimeBetweenLogins(longestTimeBetweenLogins);
		}

		Long shortestTimeBetweenLogins = (Long)attributes.get(
				"shortestTimeBetweenLogins");

		if (shortestTimeBetweenLogins != null) {
			setShortestTimeBetweenLogins(shortestTimeBetweenLogins);
		}
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getLastLogin() {
		return _lastLogin;
	}

	@Override
	public void setLastLogin(Date lastLogin) {
		_lastLogin = lastLogin;
	}

	@Override
	public long getTotalLogins() {
		return _totalLogins;
	}

	@Override
	public void setTotalLogins(long totalLogins) {
		_totalLogins = totalLogins;
	}

	@Override
	public long getLongestTimeBetweenLogins() {
		return _longestTimeBetweenLogins;
	}

	@Override
	public void setLongestTimeBetweenLogins(long longestTimeBetweenLogins) {
		_longestTimeBetweenLogins = longestTimeBetweenLogins;
	}

	@Override
	public long getShortestTimeBetweenLogins() {
		return _shortestTimeBetweenLogins;
	}

	@Override
	public void setShortestTimeBetweenLogins(long shortestTimeBetweenLogins) {
		_shortestTimeBetweenLogins = shortestTimeBetweenLogins;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserLogin.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserLogin toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserLogin)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserLoginImpl userLoginImpl = new UserLoginImpl();

		userLoginImpl.setUserId(getUserId());
		userLoginImpl.setLastLogin(getLastLogin());
		userLoginImpl.setTotalLogins(getTotalLogins());
		userLoginImpl.setLongestTimeBetweenLogins(getLongestTimeBetweenLogins());
		userLoginImpl.setShortestTimeBetweenLogins(getShortestTimeBetweenLogins());

		userLoginImpl.resetOriginalValues();

		return userLoginImpl;
	}

	@Override
	public int compareTo(UserLogin userLogin) {
		long primaryKey = userLogin.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserLogin)) {
			return false;
		}

		UserLogin userLogin = (UserLogin)obj;

		long primaryKey = userLogin.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UserLogin> toCacheModel() {
		UserLoginCacheModel userLoginCacheModel = new UserLoginCacheModel();

		userLoginCacheModel.userId = getUserId();

		Date lastLogin = getLastLogin();

		if (lastLogin != null) {
			userLoginCacheModel.lastLogin = lastLogin.getTime();
		}
		else {
			userLoginCacheModel.lastLogin = Long.MIN_VALUE;
		}

		userLoginCacheModel.totalLogins = getTotalLogins();

		userLoginCacheModel.longestTimeBetweenLogins = getLongestTimeBetweenLogins();

		userLoginCacheModel.shortestTimeBetweenLogins = getShortestTimeBetweenLogins();

		return userLoginCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", lastLogin=");
		sb.append(getLastLogin());
		sb.append(", totalLogins=");
		sb.append(getTotalLogins());
		sb.append(", longestTimeBetweenLogins=");
		sb.append(getLongestTimeBetweenLogins());
		sb.append(", shortestTimeBetweenLogins=");
		sb.append(getShortestTimeBetweenLogins());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.example.servicebuilder.extdb.model.UserLogin");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLogin</column-name><column-value><![CDATA[");
		sb.append(getLastLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalLogins</column-name><column-value><![CDATA[");
		sb.append(getTotalLogins());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longestTimeBetweenLogins</column-name><column-value><![CDATA[");
		sb.append(getLongestTimeBetweenLogins());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortestTimeBetweenLogins</column-name><column-value><![CDATA[");
		sb.append(getShortestTimeBetweenLogins());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserLogin.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserLogin.class
		};
	private long _userId;
	private Date _lastLogin;
	private long _totalLogins;
	private long _longestTimeBetweenLogins;
	private long _shortestTimeBetweenLogins;
	private UserLogin _escapedModel;
}